// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(KawsayDbContext))]
    [Migration("20250611102021_AcademicStructure")]
    partial class AcademicStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ClassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("TimetableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Domain.Entities.ClassOccurrenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("StartPeriodId")
                        .HasColumnType("integer");

                    b.Property<int?>("TimetableDayEntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StartPeriodId");

                    b.HasIndex("TimetableDayEntityId");

                    b.ToTable("ClassOccurrences");
                });

            modelBuilder.Entity("Domain.Entities.CohortEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TimetableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TimetableId");

                    b.ToTable("Cohorts");
                });

            modelBuilder.Entity("Domain.Entities.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Entities.CoursePrerequisiteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("PrerequisiteCourseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrerequisiteCourseId");

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Domain.Entities.HolidayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TimetableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TimetableId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Domain.Entities.PeriodPreferenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("DayId")
                        .HasColumnType("integer");

                    b.Property<int>("StartPeriodId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DayId");

                    b.HasIndex("StartPeriodId");

                    b.ToTable("PeriodPreferences");
                });

            modelBuilder.Entity("Domain.Entities.SectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Domain.Entities.StudentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Standing")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Entities.StudentGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CohortId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("Domain.Entities.StudentModuleGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<decimal>("GradeValue")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("IsPassing")
                        .HasColumnType("boolean");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TimetableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TimetableId");

                    b.ToTable("StudentModuleGrades");
                });

            modelBuilder.Entity("Domain.Entities.TeacherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Domain.Entities.TimetableDayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TimetableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TimetableId");

                    b.ToTable("TimetableDays");
                });

            modelBuilder.Entity("Domain.Entities.TimetableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Domain.Entities.TimetablePeriodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("End")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("TimetableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TimetableId");

                    b.ToTable("TimetablePeriods");
                });

            modelBuilder.Entity("Domain.Entities.ClassEntity", b =>
                {
                    b.HasOne("Domain.Entities.CourseEntity", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SectionEntity", "Section")
                        .WithMany("LabClasses")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.StudentGroupEntity", "StudentGroup")
                        .WithMany("Masterclasses")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.TeacherEntity", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.TimetableEntity", "Timetable")
                        .WithMany("Classes")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Section");

                    b.Navigation("StudentGroup");

                    b.Navigation("Teacher");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("Domain.Entities.ClassOccurrenceEntity", b =>
                {
                    b.HasOne("Domain.Entities.ClassEntity", "Class")
                        .WithMany("ClassOccurrences")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TimetablePeriodEntity", "StartPeriod")
                        .WithMany("Occurrences")
                        .HasForeignKey("StartPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TimetableDayEntity", null)
                        .WithMany("Occurrences")
                        .HasForeignKey("TimetableDayEntityId");

                    b.Navigation("Class");

                    b.Navigation("StartPeriod");
                });

            modelBuilder.Entity("Domain.Entities.CohortEntity", b =>
                {
                    b.HasOne("Domain.Entities.TimetableEntity", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("Domain.Entities.CoursePrerequisiteEntity", b =>
                {
                    b.HasOne("Domain.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CourseEntity", "PrerequisiteCourse")
                        .WithMany()
                        .HasForeignKey("PrerequisiteCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentEntity", b =>
                {
                    b.HasOne("Domain.Entities.ClassEntity", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StudentEntity", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.HolidayEntity", b =>
                {
                    b.HasOne("Domain.Entities.TimetableEntity", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("Domain.Entities.PeriodPreferenceEntity", b =>
                {
                    b.HasOne("Domain.Entities.ClassEntity", "Class")
                        .WithMany("PeriodPreferences")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TimetableDayEntity", "Day")
                        .WithMany("PeriodPreferences")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TimetablePeriodEntity", "StartPeriod")
                        .WithMany("PeriodPreferences")
                        .HasForeignKey("StartPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Day");

                    b.Navigation("StartPeriod");
                });

            modelBuilder.Entity("Domain.Entities.SectionEntity", b =>
                {
                    b.HasOne("Domain.Entities.StudentGroupEntity", "StudentGroup")
                        .WithMany("Sections")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("Domain.Entities.StudentEntity", b =>
                {
                    b.HasOne("Domain.Entities.SectionEntity", "Section")
                        .WithMany("Students")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Domain.Entities.StudentGroupEntity", b =>
                {
                    b.HasOne("Domain.Entities.CohortEntity", "Cohort")
                        .WithMany("StudentGroups")
                        .HasForeignKey("CohortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("Domain.Entities.StudentModuleGrade", b =>
                {
                    b.HasOne("Domain.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StudentEntity", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TimetableEntity", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("Domain.Entities.TimetableDayEntity", b =>
                {
                    b.HasOne("Domain.Entities.TimetableEntity", "Timetable")
                        .WithMany("Days")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("Domain.Entities.TimetablePeriodEntity", b =>
                {
                    b.HasOne("Domain.Entities.TimetableEntity", "Timetable")
                        .WithMany("Periods")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("Domain.Entities.ClassEntity", b =>
                {
                    b.Navigation("ClassOccurrences");

                    b.Navigation("Enrollments");

                    b.Navigation("PeriodPreferences");
                });

            modelBuilder.Entity("Domain.Entities.CohortEntity", b =>
                {
                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("Domain.Entities.CourseEntity", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Domain.Entities.SectionEntity", b =>
                {
                    b.Navigation("LabClasses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.StudentEntity", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Domain.Entities.StudentGroupEntity", b =>
                {
                    b.Navigation("Masterclasses");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Domain.Entities.TeacherEntity", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Domain.Entities.TimetableDayEntity", b =>
                {
                    b.Navigation("Occurrences");

                    b.Navigation("PeriodPreferences");
                });

            modelBuilder.Entity("Domain.Entities.TimetableEntity", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Days");

                    b.Navigation("Periods");
                });

            modelBuilder.Entity("Domain.Entities.TimetablePeriodEntity", b =>
                {
                    b.Navigation("Occurrences");

                    b.Navigation("PeriodPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
